<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\Query\QueryExpressionVisitor;

/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends \Doctrine\ORM\EntityRepository
{
    /*private $limitMax;

    public function __construct($pag){
        dump($pag); die;
    }*/

    /*
    public function getMoviesByDate(\DateTime $datestart = null,\DateTime $dateend = null){
        $t= $this->createQueryBuilder("movie")
            ->select('movie.title,movie.releaseDate,cat.name AS category')
            //->join('movie.category','cat')
            ->join('movie.category','cat',Expr\Join::ON,' ( cat.name LIKE "A%" ) ')
            ->where('movie.releaseDate >= :releaseDate')
            ->setParameter(':releaseDate',"1970")
            ->getQuery();
        $t    ->getResult()
        ;


        return $t;
    }*/

    public function getMoviesByDate(\DateTime $datestart = null,\DateTime $dateend = null){
        $t= $this->createQueryBuilder("movie")
            ->select('movie.title,movie.releaseDate,cat.name AS category')
            //->join('movie.category','cat')
            ->join('movie.category','cat')//,Expr\Join::ON,' ( cat.name LIKE "A%" ) ')
            ->where('movie.releaseDate >= :releaseDate')
            ->setParameter(':releaseDate',"1970")
            ->getQuery();
        $t    ->getResult()
        ;
        return $t;
    }



    public function getMoviesByTitle($title){
        $t= $this->createQueryBuilder("movie")
            //->select('cat.name AS category, movie.title, movie.releaseDate,movie.poster,movie.id')
            //->addSelect('cat.name')
            ->join('movie.category','cat')
            ->where('movie.title LIKE :title ')
            ->setParameter('title',"%$title%")
            ->orderBy('movie.releaseDate ')
            ->getQuery()
            ->getResult()

        ;
        return $t;
    }

    public function getMoviesByParams($criteria = array())
    {
        $array_like = array("title");
        $array_date = array("releaseDate");

        $t = $this
            ->createQueryBuilder("movie")
            ->join('movie.actors', 'actors');

        $limit = 5;
        /*if ($criteria['limit']) {
            $limit = $criteria['limit'];
            unset($criteria['limit']);
        }*/

        foreach($criteria as $key => $value) {
            if ($value) {
                if (in_array($key, $array_like)) {
                    $t = $t->andWhere("movie.$key LIKE :$key");
                    $t = $t->setParameter(":$key","%$value%");
                }elseif(is_array($value)) {
                    $t = $t->andWhere("actors.id IN (" . implode(',', $value) . ")");
                }elseif(in_array($key, $array_date)){
                    $t = $t->andWhere("movie.$key >= :$key");
                    $t = $t->setParameter(":$key",$value);
                }else{
                    $t = $t->andWhere("movie.$key = :$key");
                    $t = $t->setParameter(":$key", "$value");
                }
            }
        }

        $t = $t
            ->orderBy('movie.releaseDate ')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
        ;

        //dump($t); exit;

        return $t;
    }

    public function getMoviesById($ids = array())
    {
        if(empty($ids))
            return array();
        $limit = 5;
        $t = $this
            ->createQueryBuilder("movie")
            ->andWhere("movie.id IN (" . implode(',', $ids) . ")")
            ->orderBy('movie.releaseDate ')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
        ;
        //dump($t); exit;

        return $t;
    }

    public function getMoviesYears(){
        $t= $this->createQueryBuilder("movie")
            ->select('GROUP_CONCAT(DISTINCT YEAR(movie.releaseDate))')
            ->orderBy('movie.releaseDate', 'ASC')
            ->getQuery()
            ->getSingleScalarResult()
        ;
        $t = explode(',',$t);
        return $t;
    }

    public function getMoviesPriceById($ids = array()){
        $limit = 5;
        $t = $this
            ->createQueryBuilder("movie")
            ->select('movie.id, movie.price')
            ->andWhere("movie.id IN (" . implode(',', $ids) . ")")
            ->orderBy('movie.releaseDate ')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
        ;
        return $t;
    }
}
